
/* 
 * Program to traverse the tree in in order post order and in order
 * Pre order is left, root and right
 * In order is root, left and right
 * Post order is left, right and root
*/
class  Node {
	int key;
	Node left, right = null;
	public Node(int item){
		key = item;
		left = right = null;
	}
}
class Tree {
	Node root;
	Tree(){
		root = null;
	}
	/* Recursive implementation */
	void printInOrder(Node root){
		if (null == root){
			return;
		}
		printInOrder(root.left);
		System.out.println(root.key);
		printInOrder(root.right);
	}
	void printPreOrder(Node root){
		if (null == root){
			return;
		}
		System.out.println(root.key);
		printPreOrder(root.left);
		printPreOrder(root.right);
	}
	void printPostOrder(Node root){
		if (null == root){
			return;
		}
		printPostOrder(root.left);
		printPostOrder(root.right);
		System.out.println(root.key);
	}
	void PrintPreOrder() {
		printPreOrder(root);
	}
	void PrintInOrder() {
		printInOrder(root);
	}
	void PrintPostOrder(){
		printPostOrder(root);
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
        Tree myTree = new Tree();
        myTree.root = new Node(1);
        myTree.root.left = new Node(2);
        myTree.root.right = new Node(3);
        myTree.root.left.left = new Node(4);
        myTree.root.right.right = new Node(5);
        myTree.root.left.right = new Node(6);
        myTree.root.right.left = new Node(7);
        System.out.println("Pre Order Tree Traversal Details");
        myTree.PrintPreOrder();
        System.out.println("In Order Tree Traversal Details");
        myTree.PrintInOrder();
        System.out.println("Post Order Tree Traversal Details");
        myTree.PrintPostOrder();
        
	}

}
