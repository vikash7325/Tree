
/* 
 * Program to traverse the tree in in order post order and in order
 * Pre order is left, root and right
 * In order is root, left and right
 * Post order is left, right and root
*/
class  Node {
	int key;
	Node left, right = null;
	public Node(int item){
		key = item;
		left = right = null;
	}
}

class stack {
	int top;
	int maxSize;
	Node[] element;
	
	public stack() {
		top = -1;
		maxSize = 10;
		element = new Node[maxSize];
	}
	
	void push(Node node) {
		if (top == maxSize - 1) {
			System.out.println("Stack is full");
			return;
		}
		
		element[++top] = node;
		return;
	}
	
	Node pop() {
		if(-1 == top) {
			System.out.println("No element in the stack");
			return null;
		}
		return element[top--];
	}
	
}

class Tree {
	Node root;
	Tree(){
		root = null;
	}
	/* Recursive implementation */
	void printInOrder(Node root){
		Node currentNode;
		stack myStack = new stack();
		if (null == root){
			return;
		}
		/* Push all the nodes from root to left most to the stack */
		while(root != null) {
			myStack.push(root);
			root = root.left;
		}
		
		/*Get the last node and then start printing */
		while (myStack.top != -1) {
			currentNode = myStack.pop();
			System.out.println(currentNode.key);
			if (currentNode.right != null) {
				currentNode = currentNode.right;
				while (currentNode != null) {
					myStack.push(currentNode);
					currentNode = currentNode.left;
				}
			}
		}
	}
	
	void printPreOrder(Node root){
		Node node;
		stack myStack = new stack();
		if (null == root){
			return;
		}
		
		myStack.push(root);
		while(myStack.top!= -1) {
			node = myStack.pop();
			System.out.println(node.key);
			
			if (node.right != null) {
				myStack.push(node.right);
			}
			
			if (node.left != null) {
				myStack.push(node.left);
			}
		}
	}
	void printPostOrder(Node root){
		Node node;
		stack myStack = new stack();
		stack myTempStack = new stack();
		if (null == root){
			return;
		}
		
		myStack.push(root);
		while(myStack.top != -1) {
			node = myStack.pop();
			myTempStack.push(node);
			if (node.left != null){
				myStack.push(node.left);
			}
			if (node.right != null){
				myStack.push(node.right);
			}
		}
		
		while(myTempStack.top != -1) {
			System.out.println(myTempStack.pop().key);
		}
	}
	void PrintPreOrder() {
		printPreOrder(root);
	}
	void PrintInOrder() {
		printInOrder(root);
	}
	void PrintPostOrder(){
		printPostOrder(root);
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
        Tree myTree = new Tree();
        myTree.root = new Node(1);
        myTree.root.left = new Node(2);
        myTree.root.right = new Node(3);
        myTree.root.left.left = new Node(4);
        myTree.root.right.right = new Node(5);
        myTree.root.left.right = new Node(6);
        myTree.root.right.left = new Node(7);
        System.out.println("Pre Order Tree Traversal Details");
        myTree.PrintPreOrder();
        System.out.println("In Order Tree Traversal Details");
        myTree.PrintInOrder();
        System.out.println("Post Order Tree Traversal Details");
        myTree.PrintPostOrder(); 
	}
}
