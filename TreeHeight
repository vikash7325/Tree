import java.util.LinkedList;
import java.util.Queue;

/*
 * Get the Height of the tree and print all the nodes at particular height
 * Author: Vikash Kumar
 * 20/5/2017
 */
class MyNode {
	int key;
	MyNode left, right;
	
	public MyNode(int value){
		key = value;
		left = null;
		right = null;
	}
}

public class BFS {	
	MyNode root;
	BFS() {
		root = null;
	}
	
	int GraphHeight(MyNode node) {
		int lHeight = 0, rHeight = 0;
		if (null == node) {
			return 0;
		}
		
		if (node.left != null) {
			lHeight = GraphHeight(node.left);
		}
		if (node.right != null) {
			rHeight = GraphHeight(node.right);
		}
		
		if (lHeight > rHeight){
			return (1 + lHeight);
		}
		else {
			return (1 + rHeight);
		}
	}
	void GetHeight() {
		int len = GraphHeight(root);
		System.out.println("Height of the tree is " + len);
	}
	void PrintAtLevel(MyNode node){
		int height = GraphHeight(node);
		int index;
		for (index = 1; index <= height; index++){
			PrintNthLevel(node, index);
		}
	}
	void PrintNthLevel(MyNode node, int level){
		if (null == node){
			return;
		}
		if (1 == level){
			System.out.println(node.key);
		}
		else{
			PrintNthLevel(node.left, level - 1);
			PrintNthLevel(node.right, level - 1);
		}
	}
	void printAtLevel(){
		PrintAtLevel(root);
	}
	public static void main(String[] args) {
		BFS graph = new BFS();
		graph.root = new MyNode(1);
		graph.root.left = new MyNode(2);
		graph.root.right = new MyNode(3);
		graph.root.left.left = new MyNode(4);
		graph.root.left.right = new MyNode(5);
		graph.root.right.left = new MyNode(6);
		graph.root.right.right = new MyNode(7);
		graph.root.right.right.right = new MyNode(8);
		graph.GetHeight();
		graph.printAtLevel();
	}
}
